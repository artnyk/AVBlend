@model WebApp.Models.Model
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <title>@Model.Name</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
        body {
            margin: 0px;
            overflow: hidden;
        }
    </style>
</head>
<body>
    <div id="webGL-container"></div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
    @Scripts.Render("~/bundles/threejs");
    <script>
    /*global variables*/
        var scene, camera, renderer;
        var SCREEN_WIDTH, SCREEN_HEIGHT;
        var controls, guiControls, datGUI;
        var stats;
        var spotLight, hemi;
        var loader, model;
        var wireMaterial;

        function init() {
            /*creates empty scene object and renderer*/
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, .1, 500);
            renderer = new THREE.WebGLRenderer({ antialias: true });

            renderer.setClearColor(0xcccccc);
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.shadowMapEnabled = true;
            renderer.shadowMapSoft = true;

            camera.position.x = 43;
            camera.position.y = 10;
            camera.position.z = 15;
            camera.lookAt(scene.position);

            /*add controls*/
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.addEventListener('change', render);

            wireMaterial = new THREE.MeshBasicMaterial({ color: 0x000000, wireframe: true });

            /*datGUI controls object*/
            guiControls = new function () {
                this.wire = false;
                //this.fullScreen = false;
                this.rotationX = 0.0;
                this.rotationY = 0.0;
                this.rotationZ = 0.0;
                this.lightX = 19;
                this.lightY = 47;
                this.lightZ = 19;
                this.intensity = 1;
                this.distance = 373;
                this.angle = 1.6;
                this.exponent = 38;
                this.shadowCameraNear = 34;
                this.shadowCameraFar = 2635;
                this.shadowCameraFov = 68;
                this.shadowCameraVisible = false;
                this.shadowMapWidth = 512;
                this.shadowMapHeight = 512;
                this.shadowBias = 0.00;
                this.shadowDarkness = 0.11;
            }

            function addModel(geometry, materials) {
                var material = new THREE.MeshFaceMaterial(materials);
                model = new THREE.Mesh(geometry, material);
                model.scale.set(4, 4, 4);
                model.position.set(0, 0, 0);
                model.rotation.x = +.5 * Math.PI;
                model.rotation.z = -.3 * Math.PI;
                scene.add(model);
            }


            hemi = new THREE.HemisphereLight(0xffffff, 0xffffff);
            scene.add(hemi);

            /*adds spot light with starting parameters*/
            spotLight = new THREE.SpotLight(0xffffff);
            spotLight.castShadow = true;
            spotLight.position.set(20, 35, 40);
            spotLight.intensity = guiControls.intensity;
            spotLight.distance = guiControls.distance;
            spotLight.angle = guiControls.angle;
            spotLight.exponent = guiControls.exponent;
            spotLight.shadowCameraNear = guiControls.shadowCameraNear;
            spotLight.shadowCameraFar = guiControls.shadowCameraFar;
            spotLight.shadowCameraFov = guiControls.shadowCameraFov;
            spotLight.shadowCameraVisible = guiControls.shadowCameraVisible;
            spotLight.shadowBias = guiControls.shadowBias;
            spotLight.shadowDarkness = guiControls.shadowDarkness;
            scene.add(spotLight);

            /*add loader call add model function*/
            loader = new THREE.JSONLoader();
            loader.load('/Files/model-@Model.ModelID/@Model.Name' + '.json', addModel);

            /*adds controls to scene*/
            datGUI = new dat.GUI();
            var lightFolder = datGUI.addFolder('Light  Options');
            lightFolder.open();
            lightFolder.add(guiControls, 'lightX', -60, 180);
            lightFolder.add(guiControls, 'lightY', 0, 180);
            lightFolder.add(guiControls, 'lightZ', -60, 180);

            lightFolder.add(guiControls, 'intensity', 0.01, 5).onChange(function (value) {
                spotLight.intensity = value;
            });
            lightFolder.add(guiControls, 'distance', 0, 1000).onChange(function (value) {
                spotLight.distance = value;
            });

            datGUI.add(guiControls, 'wire').onChange(function (value) {
                if (value == true) {
                    model.material = wireMaterial;
                }
                if (value == false) {
                    scene.remove(model);
                    loader.load('/Files/model-@Model.ModelID/@Model.Name' + '.json', addModel);
                }
            });

            datGUI.close();
            $("#webGL-container").append(renderer.domElement);
            /*stats*/
            stats = new Stats();
            stats.domElement.style.position = 'absolute';
            stats.domElement.style.left = '0px';
            stats.domElement.style.top = '0px';
            $("#webGL-container").append(stats.domElement);
           
        }

        function render() {
            spotLight.position.x = guiControls.lightX;
            spotLight.position.y = guiControls.lightY;
            spotLight.position.z = guiControls.lightZ;
        }

        function animate() {
            requestAnimationFrame(animate);
            render();
            stats.update();
            renderer.render(scene, camera);
        }
        init();
        animate();

        $(window).resize(function () {
            SCREEN_WIDTH = window.innerWidth;
            SCREEN_HEIGHT = window.innerHeight;
            camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
            camera.updateProjectionMatrix();
            renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
        });
    </script>
</body>
</html>

